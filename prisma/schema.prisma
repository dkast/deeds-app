// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
  // Further reading: 
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? //@db.Text
  access_token      String? //@db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? //@db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role      @default(MEMBER)
  deeds         Deed[]
  Family        Family?   @relation(fields: [familyId], references: [id])
  familyId      String?
  totalPoints   Int       @default(0)
  levelPoints   Int       @default(0)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Deed {
  id        String   @id @default(cuid())
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?
  activity  String
  points    Int
  comments  String?  @db.TinyText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Family {
  id      String  @id @default(cuid())
  name    String
  slug    String?
  members User[]
}

model Award {
  id          String  @id @default(cuid())
  description String
  imageUrl    String
  refUrl      String?
  points      Int
}

enum Role {
  MEMBER
  PARENT
}
